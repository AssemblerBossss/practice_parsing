import dataclasses
import json
import openpyxl
import pandas as pd
from openpyxl.utils import get_column_letter
from typing import Literal
from datetime import datetime

from loggers import setup_logger
from storage.storage_config import (DATA_DIR, ALLOWED_FILES)

logger = setup_logger("saving_logger", log_file="saving.log")


class DataStorage:
    @staticmethod
    def check_is_dataclass(post) -> bool:
        return dataclasses.is_dataclass(post)

    @staticmethod
    def convert_to_dict(posts: list) -> list[dict]:
        return [dataclasses.asdict(post) if dataclasses.is_dataclass(post) else post for post in posts]

    @staticmethod
    def save_as_json(posts: list, filename: Literal['habr', 'pikabu', 'telegram'], channel_url: str = None) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç—ã –≤ JSON —Ñ–∞–π–ª.

        :param posts: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        :param filename: –ò–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        :param channel_url: –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

        :return True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤
                False –∏–Ω–∞—á–µ
        """
        DATA_DIR.mkdir(exist_ok=True, parents=True)

        if posts is None:
            logger.error("–ü–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ json")
            return False

        if filename not in ALLOWED_FILES:
            logger.error("–£–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ json: %s. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: %s",
                         filename, list(ALLOWED_FILES.keys()))
            return False

        filename = filename + '.json'
        file_path = DATA_DIR / filename

        if DataStorage.check_is_dataclass(posts[0]):
            posts = DataStorage.convert_to_dict(posts)


        output_data = {
            'metadata': {
                'generated_at' : datetime.now().strftime('%Y-%m-%d %H:%M'),
                "posts_count": len(posts),
                "channel_url": channel_url
            },
            'posts': posts
        }

        try:
            with open(file_path , 'w', encoding='utf-8') as f:
                json.dump(output_data, f, ensure_ascii=False, indent=4)
            logger.info("Saved %d posts to %s", len(posts), filename)
            return True
        except Exception as e:
            logger.error("Failed to save posts: %s", str(e))
            return False


    @staticmethod
    def auto_adjust_column_width(ws, df: pd.DataFrame) -> None:
        for i, column in enumerate(df.columns, 1):
            max_length = max([len(str(cell)) for cell in df[column].values] + [len(column)])
            ws.column_dimensions[get_column_letter(i)].width = min(max_length + 2, 100)

    @staticmethod
    def save_to_excel(matched: list[dict],
                      unmatched_habr: list[dict],
                      unmatched_telegram: list[dict],
                      matched_path: str = 'matched_posts.xlsx',
                      unmatched_habr_path: str = 'unmatched_habr.xlsx',
                      unmatched_telegram_path: str = 'unmatched_telegram.xlsx'

                      ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ Excel-—Ñ–∞–π–ª—ã.

        –°–æ–∑–¥–∞—ë—Ç —Ç—Ä–∏ —Ñ–∞–π–ª–∞:
        - matched_path: —Ñ–∞–π–ª —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏ Habr –∏ Telegram –ø–æ—Å—Ç–æ–≤.
        - unmatched_habr_path: —Ñ–∞–π–ª —Å Habr-–ø–æ—Å—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–∞—Ä—ã.
        - unmatched_telegram_path: —Ñ–∞–π–ª —Å Telegram-–ø–æ—Å—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–∞—Ä—ã.

        –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç—ã –æ—Ç —Å–∏–º–≤–æ–ª–∞ '#' –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö.

        Args:
            matched (list[dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Å–æ–≤–ø–∞–≤—à–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏.
            unmatched_habr (list[dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å Habr-–ø–æ—Å—Ç–∞–º–∏ –±–µ–∑ –ø–∞—Ä—ã.
            unmatched_telegram (list[dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å Telegram-–ø–æ—Å—Ç–∞–º–∏ –±–µ–∑ –ø–∞—Ä—ã.
            matched_path (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≤–ø–∞–≤—à–∏—Ö –ø–∞—Ä.
            unmatched_habr_path (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö Habr-–ø–æ—Å—Ç–æ–≤.
            unmatched_telegram_path (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö Telegram-–ø–æ—Å—Ç–æ–≤.

        Returns:
            None
        """


        DATA_DIR.mkdir(exist_ok=True, parents=True)

        matched_path = DATA_DIR / matched_path
        unmatched_habr_path = DATA_DIR / unmatched_habr_path
        unmatched_telegram_path = DATA_DIR / unmatched_telegram_path

        matched_df = pd.DataFrame(matched)
        unmatched_df = pd.DataFrame(unmatched_habr)
        unmatched_telegram_df = pd.DataFrame(unmatched_telegram)

        matched_df['telegram_text'] = matched_df['telegram_text'].str.replace('#', '', regex=False)
        matched_df['habr_text'] = matched_df['habr_text'].str.replace('#', '', regex=False)
        unmatched_telegram_df['text'] = unmatched_telegram_df['text'].str.replace('#', '', regex=False)

        with pd.ExcelWriter(matched_path, engine='openpyxl') as writer:
            matched_df.to_excel(writer, index=False, sheet_name='Matched')
            DataStorage.auto_adjust_column_width(writer.sheets['Matched'], matched_df)

        with pd.ExcelWriter(unmatched_habr_path, engine='openpyxl') as writer:
            unmatched_df.to_excel(writer, index=False, sheet_name='Unmatched_habr')
            DataStorage.auto_adjust_column_width(writer.sheets['Unmatched_habr'], unmatched_df)

        with pd.ExcelWriter(unmatched_telegram_path, engine='openpyxl') as writer:
            unmatched_telegram_df.to_excel(writer, index=False, sheet_name='Unmatched_telegram')
            DataStorage.auto_adjust_column_width(writer.sheets['Unmatched_telegram'], unmatched_telegram_df)

        logger.info(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {matched_path}")
        logger.info(f"üìÑ –ù–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ habr-–ø–æ—Å—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {unmatched_habr_path}")
        logger.info(f"üìÑ –ù–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ telegram-–ø–æ—Å—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {unmatched_telegram_path}")
